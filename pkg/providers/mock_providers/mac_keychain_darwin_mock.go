// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/providers/mac_keychain_darwin.go

// Package mock_providers is a generated GoMock package.
package mock_providers

import (
	reflect "reflect"

	keyring "github.com/99designs/keyring"
	gomock "github.com/golang/mock/gomock"
)

// MockKeychainClient is a mock of KeychainClient interface.
type MockKeychainClient struct {
	ctrl     *gomock.Controller
	recorder *MockKeychainClientMockRecorder
}

// MockKeychainClientMockRecorder is the mock recorder for MockKeychainClient.
type MockKeychainClientMockRecorder struct {
	mock *MockKeychainClient
}

// NewMockKeychainClient creates a new mock instance.
func NewMockKeychainClient(ctrl *gomock.Controller) *MockKeychainClient {
	mock := &MockKeychainClient{ctrl: ctrl}
	mock.recorder = &MockKeychainClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKeychainClient) EXPECT() *MockKeychainClientMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockKeychainClient) Get(key string) (keyring.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].(keyring.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockKeychainClientMockRecorder) Get(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockKeychainClient)(nil).Get), key)
}

// Keys mocks base method.
func (m *MockKeychainClient) Keys() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Keys")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Keys indicates an expected call of Keys.
func (mr *MockKeychainClientMockRecorder) Keys() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Keys", reflect.TypeOf((*MockKeychainClient)(nil).Keys))
}

// Remove mocks base method.
func (m *MockKeychainClient) Remove(key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockKeychainClientMockRecorder) Remove(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockKeychainClient)(nil).Remove), key)
}

// Set mocks base method.
func (m *MockKeychainClient) Set(item keyring.Item) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", item)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockKeychainClientMockRecorder) Set(item interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockKeychainClient)(nil).Set), item)
}
